<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>%2F2019%2F10%2F01%2Ffirst%2F</url>
    <content type="text"><![CDATA[@font-face { font-family: octicons-anchor; src: url(https://cdnjs.cloudflare.com/ajax/libs/octicons/4.4.0/font/octicons.woff) format('woff'); } * { box-sizing: border-box; } body { width: 980px; margin-right: auto; margin-left: auto; color:#333; background:#fff; } body .markdown-body { padding: 45px; border: 1px solid #ddd; border-radius: 3px; word-wrap: break-word; } pre { font: 12px Consolas, "Liberation Mono", Menlo, Courier, monospace; } .markdown-body { -webkit-text-size-adjust: 100%; text-size-adjust: 100%; color: #333; font-family: "Helvetica Neue", Helvetica, "Segoe UI", Arial, freesans, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"; font-size: 16px; line-height: 1.6; word-wrap: break-word; } .markdown-body a { background-color: transparent; } .markdown-body a:active, .markdown-body a:hover { outline: 0; } .markdown-body strong { font-weight: bold; } .markdown-body h1 { font-size: 2em; margin: 0.67em 0; } .markdown-body img { border: 0; } .markdown-body hr { box-sizing: content-box; height: 0; } .markdown-body pre { overflow: auto; } .markdown-body code, .markdown-body kbd, .markdown-body pre { font-family: monospace, monospace; font-size: 1em; } .markdown-body input { color: inherit; font: inherit; margin: 0; } .markdown-body html input[disabled] { cursor: default; } .markdown-body input { line-height: normal; } .markdown-body input[type="checkbox"] { box-sizing: border-box; padding: 0; } .markdown-body table { border-collapse: collapse; border-spacing: 0; } .markdown-body td, .markdown-body th { padding: 0; } .markdown-body input { font: 13px / 1.4 Helvetica, arial, nimbussansl, liberationsans, freesans, clean, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"; } .markdown-body a { color: #4078c0; text-decoration: none; } .markdown-body a:hover, .markdown-body a:active { text-decoration: underline; } .markdown-body hr { height: 0; margin: 15px 0; overflow: hidden; background: transparent; border: 0; border-bottom: 1px solid #ddd; } .markdown-body hr:before { display: table; content: ""; } .markdown-body hr:after { display: table; clear: both; content: ""; } .markdown-body h1, .markdown-body h2, .markdown-body h3, .markdown-body h4, .markdown-body h5, .markdown-body h6 { margin-top: 15px; margin-bottom: 15px; line-height: 1.1; } .markdown-body h1 { font-size: 30px; } .markdown-body h2 { font-size: 21px; } .markdown-body h3 { font-size: 16px; } .markdown-body h4 { font-size: 14px; } .markdown-body h5 { font-size: 12px; } .markdown-body h6 { font-size: 11px; } .markdown-body blockquote { margin: 0; } .markdown-body ul, .markdown-body ol { padding: 0; margin-top: 0; margin-bottom: 0; } .markdown-body ol ol, .markdown-body ul ol { list-style-type: lower-roman; } .markdown-body ul ul ol, .markdown-body ul ol ol, .markdown-body ol ul ol, .markdown-body ol ol ol { list-style-type: lower-alpha; } .markdown-body dd { margin-left: 0; } .markdown-body code { font-family: Consolas, "Liberation Mono", Menlo, Courier, monospace; font-size: 12px; } .markdown-body pre { margin-top: 0; margin-bottom: 0; font: 12px Consolas, "Liberation Mono", Menlo, Courier, monospace; } .markdown-body .select::-ms-expand { opacity: 0; } .markdown-body .octicon { font: normal normal normal 16px/1 octicons-anchor; display: inline-block; text-decoration: none; text-rendering: auto; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; } .markdown-body .octicon-link:before { content: '\f05c'; } .markdown-body:before { display: table; content: ""; } .markdown-body:after { display: table; clear: both; content: ""; } .markdown-body>*:first-child { margin-top: 0 !important; } .markdown-body>*:last-child { margin-bottom: 0 !important; } .markdown-body a:not([href]) { color: inherit; text-decoration: none; } .markdown-body .anchor { display: inline-block; padding-right: 2px; margin-left: -18px; } .markdown-body .anchor:focus { outline: none; } .markdown-body h1, .markdown-body h2, .markdown-body h3, .markdown-body h4, .markdown-body h5, .markdown-body h6 { margin-top: 1em; margin-bottom: 16px; font-weight: bold; line-height: 1.4; } .markdown-body h1 .octicon-link, .markdown-body h2 .octicon-link, .markdown-body h3 .octicon-link, .markdown-body h4 .octicon-link, .markdown-body h5 .octicon-link, .markdown-body h6 .octicon-link { color: #000; vertical-align: middle; visibility: hidden; } .markdown-body h1:hover .anchor, .markdown-body h2:hover .anchor, .markdown-body h3:hover .anchor, .markdown-body h4:hover .anchor, .markdown-body h5:hover .anchor, .markdown-body h6:hover .anchor { text-decoration: none; } .markdown-body h1:hover .anchor .octicon-link, .markdown-body h2:hover .anchor .octicon-link, .markdown-body h3:hover .anchor .octicon-link, .markdown-body h4:hover .anchor .octicon-link, .markdown-body h5:hover .anchor .octicon-link, .markdown-body h6:hover .anchor .octicon-link { visibility: visible; } .markdown-body h1 { padding-bottom: 0.3em; font-size: 2.25em; line-height: 1.2; border-bottom: 1px solid #eee; } .markdown-body h1 .anchor { line-height: 1; } .markdown-body h2 { padding-bottom: 0.3em; font-size: 1.75em; line-height: 1.225; border-bottom: 1px solid #eee; } .markdown-body h2 .anchor { line-height: 1; } .markdown-body h3 { font-size: 1.5em; line-height: 1.43; } .markdown-body h3 .anchor { line-height: 1.2; } .markdown-body h4 { font-size: 1.25em; } .markdown-body h4 .anchor { line-height: 1.2; } .markdown-body h5 { font-size: 1em; } .markdown-body h5 .anchor { line-height: 1.1; } .markdown-body h6 { font-size: 1em; color: #777; } .markdown-body h6 .anchor { line-height: 1.1; } .markdown-body p, .markdown-body blockquote, .markdown-body ul, .markdown-body ol, .markdown-body dl, .markdown-body table, .markdown-body pre { margin-top: 0; margin-bottom: 16px; } .markdown-body hr { height: 4px; padding: 0; margin: 16px 0; background-color: #e7e7e7; border: 0 none; } .markdown-body ul, .markdown-body ol { padding-left: 2em; } .markdown-body ul ul, .markdown-body ul ol, .markdown-body ol ol, .markdown-body ol ul { margin-top: 0; margin-bottom: 0; } .markdown-body li>p { margin-top: 16px; } .markdown-body dl { padding: 0; } .markdown-body dl dt { padding: 0; margin-top: 16px; font-size: 1em; font-style: italic; font-weight: bold; } .markdown-body dl dd { padding: 0 16px; margin-bottom: 16px; } .markdown-body blockquote { padding: 0 15px; color: #777; border-left: 4px solid #ddd; } .markdown-body blockquote>:first-child { margin-top: 0; } .markdown-body blockquote>:last-child { margin-bottom: 0; } .markdown-body table { display: block; width: 100%; overflow: auto; word-break: normal; word-break: keep-all; } .markdown-body table th { font-weight: bold; } .markdown-body table th, .markdown-body table td { padding: 6px 13px; border: 1px solid #ddd; } .markdown-body table tr { background-color: #fff; border-top: 1px solid #ccc; } .markdown-body table tr:nth-child(2n) { background-color: #f8f8f8; } .markdown-body img { max-width: 100%; box-sizing: content-box; background-color: #fff; } .markdown-body code { padding: 0; padding-top: 0.2em; padding-bottom: 0.2em; margin: 0; font-size: 85%; background-color: rgba(0,0,0,0.04); border-radius: 3px; } .markdown-body code:before, .markdown-body code:after { letter-spacing: -0.2em; content: "\00a0"; } .markdown-body pre>code { padding: 0; margin: 0; font-size: 100%; word-break: normal; white-space: pre; background: transparent; border: 0; } .markdown-body .highlight { margin-bottom: 16px; } .markdown-body .highlight pre, .markdown-body pre { padding: 16px; overflow: auto; font-size: 85%; line-height: 1.45; background-color: #f7f7f7; border-radius: 3px; } .markdown-body .highlight pre { margin-bottom: 0; word-break: normal; } .markdown-body pre { word-wrap: normal; } .markdown-body pre code { display: inline; max-width: initial; padding: 0; margin: 0; overflow: initial; line-height: inherit; word-wrap: normal; background-color: transparent; border: 0; } .markdown-body pre code:before, .markdown-body pre code:after { content: normal; } .markdown-body kbd { display: inline-block; padding: 3px 5px; font-size: 11px; line-height: 10px; color: #555; vertical-align: middle; background-color: #fcfcfc; border: solid 1px #ccc; border-bottom-color: #bbb; border-radius: 3px; box-shadow: inset 0 -1px 0 #bbb; } .markdown-body .pl-c { color: #969896; } .markdown-body .pl-c1, .markdown-body .pl-s .pl-v { color: #0086b3; } .markdown-body .pl-e, .markdown-body .pl-en { color: #795da3; } .markdown-body .pl-s .pl-s1, .markdown-body .pl-smi { color: #333; } .markdown-body .pl-ent { color: #63a35c; } .markdown-body .pl-k { color: #a71d5d; } .markdown-body .pl-pds, .markdown-body .pl-s, .markdown-body .pl-s .pl-pse .pl-s1, .markdown-body .pl-sr, .markdown-body .pl-sr .pl-cce, .markdown-body .pl-sr .pl-sra, .markdown-body .pl-sr .pl-sre { color: #183691; } .markdown-body .pl-v { color: #ed6a43; } .markdown-body .pl-id { color: #b52a1d; } .markdown-body .pl-ii { background-color: #b52a1d; color: #f8f8f8; } .markdown-body .pl-sr .pl-cce { color: #63a35c; font-weight: bold; } .markdown-body .pl-ml { color: #693a17; } .markdown-body .pl-mh, .markdown-body .pl-mh .pl-en, .markdown-body .pl-ms { color: #1d3e81; font-weight: bold; } .markdown-body .pl-mq { color: #008080; } .markdown-body .pl-mi { color: #333; font-style: italic; } .markdown-body .pl-mb { color: #333; font-weight: bold; } .markdown-body .pl-md { background-color: #ffecec; color: #bd2c00; } .markdown-body .pl-mi1 { background-color: #eaffea; color: #55a532; } .markdown-body .pl-mdr { color: #795da3; font-weight: bold; } .markdown-body .pl-mo { color: #1d3e81; } .markdown-body kbd { display: inline-block; padding: 3px 5px; font: 11px Consolas, "Liberation Mono", Menlo, Courier, monospace; line-height: 10px; color: #555; vertical-align: middle; background-color: #fcfcfc; border: solid 1px #ccc; border-bottom-color: #bbb; border-radius: 3px; box-shadow: inset 0 -1px 0 #bbb; } .markdown-body .plan-price-unit { color: #767676; font-weight: normal; } .markdown-body .task-list-item { list-style-type: none; } .markdown-body .task-list-item+.task-list-item { margin-top: 3px; } .markdown-body .task-list-item input { margin: 0 0.35em 0.25em -1.6em; vertical-align: middle; } .markdown-body .plan-choice { padding: 15px; padding-left: 40px; display: block; border: 1px solid #e0e0e0; position: relative; font-weight: normal; background-color: #fafafa; } .markdown-body .plan-choice.open { background-color: #fff; } .markdown-body .plan-choice.open .plan-choice-seat-breakdown { display: block; } .markdown-body .plan-choice-free { border-radius: 3px 3px 0 0; } .markdown-body .plan-choice-paid { border-radius: 0 0 3px 3px; border-top: 0; margin-bottom: 20px; } .markdown-body .plan-choice-radio { position: absolute; left: 15px; top: 18px; } .markdown-body .plan-choice-exp { color: #999; font-size: 12px; margin-top: 5px; } .markdown-body .plan-choice-seat-breakdown { margin-top: 10px; display: none; } .markdown-body :checked+.radio-label { z-index: 1; position: relative; border-color: #4078c0; } @media print { body .markdown-body { padding: 0; border: none; } } first title: HDU 6406 Taotao Picks Apples 线段树+二分合并 date: 2019-10-01 22:00:31 categories: 线段树 HDU 6406 Problem Description There is an apple tree in front of Taotao's house. When autumn comes, n apples on the tree ripen, and Taotao will go to pick these apples. When Taotao picks apples, Taotao scans these apples from the first one to the last one. If the current apple is the first apple, or it is strictly higher than the previously picked one, then Taotao will pick this apple; otherwise, he will not pick. Given the heights of these apples h1, h2, ..., hn, you are required to answer some independent queries. Each query is two integers p, q, which asks the number of apples Taotao would pick, if the height of the p-th apple were q (instead of hp). Can you answer all these queries? Input The first line of input is a single line of integer T (1 ≤ T ≤ 10), the number of test cases. Each test case begins with a line of two integers n, m (1 ≤ n, m ≤ 105), denoting the number of apples and the number of queries. It is then followed by a single line of n integers h1, h2, ..., hn (1 ≤ hi ≤ 109), denoting the heights of the apples. The next m lines give the queries. Each of these m lines contains two integers p (1 ≤ p ≤ n) and q (1 ≤ q ≤ 109), as described in the problem statement. Output For each query, display the answer in a single line. 题意 给你一个序列，序列的第一个数必取，从前往后，当碰到比前一个数严格大于的数就选取。M次修改序列中的值，问修改后的序列能选取的个数。询问不叠加。 题解 首先，根据题意，我们可以建立一颗线段树，维护区间的最大值mx和能选取的长度len 问题就在于两个区间如何合并 Example Input 1 5 3 1 2 3 4 4 1 5 5 5 2 3 Example Output 1 5 3 #include&lt;iostream&gt; #include&lt;algorithm&gt; #include&lt;cstdio&gt; #include&lt;cmath&gt; #include&lt;cstring&gt; #include&lt;queue&gt; #include&lt;set&gt; #include&lt;map&gt; #include&lt;stack&gt; using namespace std; const int N = 1e5 + 50; int mx[N * 4], len[N * 4], n, m, a[N], T; int dfs(int p, int l, int r, int v) { //cout&lt;&lt;l&lt;&lt;" "&lt;&lt;r&lt;&lt;endl; if (l == r) return v &lt; mx[p]; else if (mx[p &lt;&lt; 1] &lt;= v) return dfs(p &lt;&lt; 1 | 1, ((l + r) &gt;&gt; 1) + 1, r, v); else return dfs(p &lt;&lt; 1, l, (l + r) &gt;&gt; 1, v) + len[p] - len[p &lt;&lt; 1]; } void build(int p, int l, int r) { if (l == r) { mx[p] = a[l]; len[p] = 1; return ; } int m = (l + r) &gt;&gt; 1; build(p &lt;&lt; 1, l, m); build(p &lt;&lt; 1 | 1, m + 1, r); mx[p] = max(mx[p &lt;&lt; 1], mx[p &lt;&lt; 1 | 1]); len[p] = len[p &lt;&lt; 1] + dfs(p &lt;&lt; 1 | 1, m + 1, r, mx[p &lt;&lt; 1]); } void update(int p, int l, int r, int x, int v) { if (l == r) { mx[p] = v; return ; } int m = (l + r) &gt;&gt; 1; if (x &lt;= m) update(p &lt;&lt; 1, l, m, x, v); else update(p &lt;&lt; 1 | 1, m + 1, r, x, v); mx[p] = max(mx[p &lt;&lt; 1], mx[p &lt;&lt; 1 | 1]); len[p] = len[p &lt;&lt; 1] + dfs(p &lt;&lt; 1 | 1, m + 1, r, mx[p &lt;&lt; 1]); } int main() { #ifdef ONLINE_JUDGE #else freopen("r.txt", "r", stdin); #endif ios::sync_with_stdio(false); for (cin &gt;&gt; T; T--;) { cin &gt;&gt; n &gt;&gt; m; for (int i = 1; i &lt;= n; i++) cin &gt;&gt; a[i]; build(1, 1, n); for (int x, v, i = 1; i &lt;= m; i++) { cin &gt;&gt; x &gt;&gt; v; update(1, 1, n, x, v); cout &lt;&lt; len[1] &lt;&lt; endl; update(1, 1, n, x, a[x]); } } }]]></content>
  </entry>
  <entry>
    <title><![CDATA[HDU 6406 Taotao Picks Apples 线段树+二分合并]]></title>
    <url>%2F2019%2F10%2F01%2Ffirst%2F</url>
    <content type="text"><![CDATA[HDU 6406 Problem DescriptionThere is an apple tree in front of Taotao’s house. When autumn comes, n apples on the tree ripen, and Taotao will go to pick these apples. When Taotao picks apples, Taotao scans these apples from the first one to the last one. If the current apple is the first apple, or it is strictly higher than the previously picked one, then Taotao will pick this apple; otherwise, he will not pick. Given the heights of these apples h1, h2, …, hn, you are required to answer some independent queries. Each query is two integers p, q, which asks the number of apples Taotao would pick, if the height of the p-th apple were q (instead of hp). Can you answer all these queries? InputThe first line of input is a single line of integer T (1 ≤ T ≤ 10), the number of test cases. Each test case begins with a line of two integers n, m (1 ≤ n, m ≤ 105), denoting the number of apples and the number of queries. It is then followed by a single line of n integers h1, h2, …, hn (1 ≤ hi ≤ 109), denoting the heights of the apples. The next m lines give the queries. Each of these m lines contains two integers p (1 ≤ p ≤ n) and q (1 ≤ q ≤ 109), as described in the problem statement. OutputFor each query, display the answer in a single line. 题意给你一个序列，序列的第一个数必取，从前往后，当碰到比前一个数严格大于的数就选取。M次修改序列中的值，问修改后的序列能选取的个数。询问不叠加。 题解首先，根据题意，我们可以建立一颗线段树，维护区间的最大值mx和能选取的长度len问题就在于两个区间如何合并 Example Input12345615 31 2 3 4 41 55 52 3 Example Output123153 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;cstdio&gt;#include&lt;cmath&gt;#include&lt;cstring&gt;#include&lt;queue&gt;#include&lt;set&gt;#include&lt;map&gt;#include&lt;stack&gt;using namespace std;const int N = 1e5 + 50;int mx[N * 4], len[N * 4], n, m, a[N], T;int dfs(int p, int l, int r, int v)&#123; //cout&lt;&lt;l&lt;&lt;" "&lt;&lt;r&lt;&lt;endl; if (l == r) return v &lt; mx[p]; else if (mx[p &lt;&lt; 1] &lt;= v) return dfs(p &lt;&lt; 1 | 1, ((l + r) &gt;&gt; 1) + 1, r, v); else return dfs(p &lt;&lt; 1, l, (l + r) &gt;&gt; 1, v) + len[p] - len[p &lt;&lt; 1];&#125;void build(int p, int l, int r)&#123; if (l == r) &#123; mx[p] = a[l]; len[p] = 1; return ; &#125; int m = (l + r) &gt;&gt; 1; build(p &lt;&lt; 1, l, m); build(p &lt;&lt; 1 | 1, m + 1, r); mx[p] = max(mx[p &lt;&lt; 1], mx[p &lt;&lt; 1 | 1]); len[p] = len[p &lt;&lt; 1] + dfs(p &lt;&lt; 1 | 1, m + 1, r, mx[p &lt;&lt; 1]);&#125;void update(int p, int l, int r, int x, int v)&#123; if (l == r) &#123; mx[p] = v; return ; &#125; int m = (l + r) &gt;&gt; 1; if (x &lt;= m) update(p &lt;&lt; 1, l, m, x, v); else update(p &lt;&lt; 1 | 1, m + 1, r, x, v); mx[p] = max(mx[p &lt;&lt; 1], mx[p &lt;&lt; 1 | 1]); len[p] = len[p &lt;&lt; 1] + dfs(p &lt;&lt; 1 | 1, m + 1, r, mx[p &lt;&lt; 1]);&#125;int main()&#123;#ifdef ONLINE_JUDGE#else freopen("r.txt", "r", stdin);#endif ios::sync_with_stdio(false); for (cin &gt;&gt; T; T--;) &#123; cin &gt;&gt; n &gt;&gt; m; for (int i = 1; i &lt;= n; i++) cin &gt;&gt; a[i]; build(1, 1, n); for (int x, v, i = 1; i &lt;= m; i++) &#123; cin &gt;&gt; x &gt;&gt; v; update(1, 1, n, x, v); cout &lt;&lt; len[1] &lt;&lt; endl; update(1, 1, n, x, a[x]); &#125; &#125;&#125;]]></content>
      <categories>
        <category>线段树</category>
      </categories>
  </entry>
</search>
