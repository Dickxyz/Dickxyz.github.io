<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[page]]></title>
    <url>%2F2019%2F10%2F01%2Fpage%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[这是一个测试]]></title>
    <url>%2F2019%2F10%2F01%2Ffirst%2F</url>
    <content type="text"><![CDATA[welcome to my blog123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;cstdio&gt;#include&lt;cmath&gt;#include&lt;cstring&gt;#include&lt;queue&gt;#include&lt;set&gt;#include&lt;map&gt;#include&lt;stack&gt;using namespace std;const int N = 1e5 + 50;int mx[N * 4], len[N * 4], n, m, a[N], T;int dfs(int p, int l, int r, int v)&#123; //cout&lt;&lt;l&lt;&lt;" "&lt;&lt;r&lt;&lt;endl; if (l == r) return v &lt; mx[p]; else if (mx[p &lt;&lt; 1] &lt;= v) return dfs(p &lt;&lt; 1 | 1, ((l + r) &gt;&gt; 1) + 1, r, v); else return dfs(p &lt;&lt; 1, l, (l + r) &gt;&gt; 1, v) + len[p] - len[p &lt;&lt; 1];&#125;void build(int p, int l, int r)&#123; if (l == r) &#123; mx[p] = a[l]; len[p] = 1; return ; &#125; int m = (l + r) &gt;&gt; 1; build(p &lt;&lt; 1, l, m); build(p &lt;&lt; 1 | 1, m + 1, r); mx[p] = max(mx[p &lt;&lt; 1], mx[p &lt;&lt; 1 | 1]); len[p] = len[p &lt;&lt; 1] + dfs(p &lt;&lt; 1 | 1, m + 1, r, mx[p &lt;&lt; 1]);&#125;void update(int p, int l, int r, int x, int v)&#123; if (l == r) &#123; mx[p] = v; return ; &#125; int m = (l + r) &gt;&gt; 1; if (x &lt;= m) update(p &lt;&lt; 1, l, m, x, v); else update(p &lt;&lt; 1 | 1, m + 1, r, x, v); mx[p] = max(mx[p &lt;&lt; 1], mx[p &lt;&lt; 1 | 1]); len[p] = len[p &lt;&lt; 1] + dfs(p &lt;&lt; 1 | 1, m + 1, r, mx[p &lt;&lt; 1]);&#125;int main()&#123;#ifdef ONLINE_JUDGE#else freopen("r.txt", "r", stdin);#endif ios::sync_with_stdio(false); for (cin &gt;&gt; T; T--;) &#123; cin &gt;&gt; n &gt;&gt; m; for (int i = 1; i &lt;= n; i++) cin &gt;&gt; a[i]; build(1, 1, n); for (int x, v, i = 1; i &lt;= m; i++) &#123; cin &gt;&gt; x &gt;&gt; v; update(1, 1, n, x, v); cout &lt;&lt; len[1] &lt;&lt; endl; update(1, 1, n, x, a[x]); &#125; &#125;&#125;]]></content>
      <categories>
        <category>树形DP</category>
      </categories>
      <tags>
        <tag>标签</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F10%2F01%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
